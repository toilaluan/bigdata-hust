version: "3"

services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    # image: bde2020/spark-java-template:3.1.1-hadoop3.2-java11
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9010:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env


  datanode-1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode-1
    restart: always
    volumes:
      - hadoop_datanode-1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
    env_file:
      - ./hadoop.env


  datanode-2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode-2
    restart: always
    volumes:
      - hadoop_datanode-2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env


  datanode-3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode-3
    restart: always
    volumes:
      - hadoop_datanode-3:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env


  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870"
    env_file:
      - ./hadoop.env


  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 resourcemanager:8088"
    env_file:
      - ./hadoop.env


  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env


  # spark-master:
  #   image: bde2020/spark-master:3.1.1-hadoop3.2-java11
  #   # image: johnsnowlabs/sparknlp:sparkocr_jupyter_manual
  #   container_name: spark-master
  #   depends_on:
  #     - namenode
  #     - datanode-1 
  #     - datanode-2
  #     - datanode-3
  #   ports:
  #     - "8080:8080"
  #     - "7077:7077"
  #   environment:
  #     - PYSPARK_PYTHON=/usr/bin/python3
  #     - INIT_DAEMON_STEP=setup_spark
  #     - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
  #     - SPARK_MASTER_HOST=spark-master
  #     - CC=gcc
  #     - CXX=g++


  # spark-worker-1:
  #   image: bde2020/spark-worker:3.1.1-hadoop3.2-java11
  #   container_name: spark-worker-1
  #   depends_on:
  #     - spark-master
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - "SPARK_MASTER=spark://spark-master:7077"
  #     - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
  #     - SPARK_WORKER_CORES=1
  #     - SPARK_WORKER_MEMORY=1G
  #     - SPARK_DRIVER_MEMORY=1G


  # spark-worker-2:
  #   image: bde2020/spark-worker:3.1.1-hadoop3.2-java11
  #   container_name: spark-worker-2
  #   depends_on:
  #     - spark-master
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     - "SPARK_MASTER=spark://spark-master:7077"
  #     - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
  #     - SPARK_WORKER_CORES=1
  #     - SPARK_WORKER_MEMORY=1G
  #     - SPARK_DRIVER_MEMORY=1G
      

  # # spark-worker-3:
  # #   image: bde2020/spark-worker:3.1.1-hadoop3.2-java11
  # #   container_name: spark-worker-3
  # #   depends_on:
  # #     - spark-master
  # #   ports:
  # #     - "8083:8083"
  # #   environment:
  # #     - "SPARK_MASTER=spark://spark-master:7077"
  # #     - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
  # #     - SPARK_WORKER_CORES=1
  # #     - SPARK_WORKER_MEMORY=1G
  # #     - SPARK_DRIVER_MEMORY=1G


  # zookeeper:
  #   image: confluentinc/cp-zookeeper:5.1.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - 2181:2181
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181


  # kafka-1:
  #   image: confluentinc/cp-kafka:5.1.0
  #   hostname: kafka-1
  #   container_name: kafka-1
  #   ports:
  #     - 9092:9092
  #     - 29092:29092
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=WARN"
  #     KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock


  # kafka-2:
  #   image: confluentinc/cp-kafka:5.1.0
  #   hostname: kafka-2
  #   container_name: kafka-2
  #   ports:
  #     - 9093:9093
  #     - 29093:29093
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093,PLAINTEXT_HOST://localhost:29093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=WARN"
  #     KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock


  # kafka-3:
  #   image: confluentinc/cp-kafka:5.1.0
  #   hostname: kafka-3
  #   container_name: kafka-3
  #   ports:
  #     - 9094:9094
  #     - 29094:29094
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9094,PLAINTEXT_HOST://localhost:29094
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=WARN"
  #     KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock


  cassandra-node:
    image: cassandra:latest
    container_name: cassandra-node
    ports:
      - "9042:9042"
    volumes:
      - /var/lib/docker/volumes/cassandra-data/_data:/var/lib/cassandra
    environment:
      - CASSANDRA_USER=admin
      - CASSANDRA_PASSWORD=admin
    command: ["cassandra", "-f"]
    restart: always


  # spark-history-server:
  #     image: bde2020/spark-history-server:3.3.0-hadoop3.3
  #     container_name: spark-history-server
  #     depends_on:
  #       - spark-master
  #     ports:
  #       - "18081:18081"
  #     volumes:
  #       - /tmp/spark-events-local:/tmp/spark-events


volumes:
  hadoop_namenode:
  hadoop_datanode-1:
  hadoop_datanode-2:
  hadoop_datanode-3:
  hadoop_historyserver: